# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2

LEFT = 0
RIGHT = 1
paddle1_vel=0
paddle2_vel=0
paddle1_pos=[0,HEIGHT/2-PAD_HEIGHT/2]
paddle2_pos=[WIDTH,HEIGHT/2-PAD_HEIGHT/2]
ball_pos=[WIDTH/2,HEIGHT/2]
ball_vel=[5,-5]
score1=0
score2=0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos=[WIDTH/2,HEIGHT/2]
   
    ball_vel=[5,-5]
    if direction==1:
        ball_vel[0]=ball_vel[0]
        
    else:
        ball_vel[0]=-ball_vel[0]
        
    


# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1=0
    score2=0
    spawn_ball(RIGHT)
    

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel,RIGHT,LEFT
 
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    if  ball_pos[0]+BALL_RADIUS>=WIDTH:
        ball_vel[0]=-ball_vel[0]
    elif ball_pos[0]<=BALL_RADIUS:
        ball_vel[0]=-ball_vel[0]
    elif ball_pos[1]<=BALL_RADIUS:
        ball_vel[1]=-ball_vel[1]
    elif ball_pos[1]+BALL_RADIUS>=HEIGHT:
        ball_vel[1]=-ball_vel[1]
        
    ball_pos[0]+=ball_vel[0]
    ball_pos[1]+=ball_vel[1]
    if ball_vel[0]>0:
        LEFT = 0
        RIGHT = 1
        
    elif ball_vel[0]<0:
        LEFT = 1
        RIGHT = 0
        
        
    
    
    
    
    
            
    # draw ball
   
    
    
    
    
    canvas.draw_circle(ball_pos,BALL_RADIUS,5,'white','white')
    # update paddle's vertical position, keep paddle on the screen
    if (paddle1_pos[1]+paddle1_vel)>=0 and (paddle1_pos[1]+PAD_HEIGHT+paddle1_vel)<HEIGHT:
        paddle1_pos[1]+=paddle1_vel
    if (paddle2_pos[1]+paddle2_vel)>=0 and (paddle2_pos[1]+PAD_HEIGHT+paddle2_vel)<HEIGHT:
        paddle2_pos[1]+=paddle2_vel

     
    
    # draw paddles
    
    
    canvas.draw_line(paddle1_pos,[0,paddle1_pos[1]+PAD_HEIGHT],PAD_WIDTH*2,'white')
    canvas.draw_line(paddle2_pos,[WIDTH,paddle2_pos[1]+PAD_HEIGHT],PAD_WIDTH*2,'white')
    
    # determine whether paddle and ball collide    
    if (ball_pos[1]<=paddle1_pos[1]-BALL_RADIUS or ball_pos[1]>=paddle1_pos[1]+PAD_HEIGHT+BALL_RADIUS)and ball_pos[0]-BALL_RADIUS<=4: 
        score2+=1
        RIGHT=1
        spawn_ball(RIGHT)
        
        
        
    if (ball_pos[1]<=paddle2_pos[1]-BALL_RADIUS or ball_pos[1]>=paddle2_pos[1]+PAD_HEIGHT+BALL_RADIUS)and ball_pos[0]+BALL_RADIUS>=WIDTH-4: 
        score1+=1
        RIGHT=0
        spawn_ball(RIGHT)
    
    
    # draw scores   
    
    
    canvas.draw_text(str(score1),[150,25],30,'white')
    canvas.draw_text(str(score2),[450,25],30,'white')
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP['w']:
        
        paddle1_vel=-4
    elif key==simplegui.KEY_MAP['s']:
        
        paddle1_vel=4
    if key==simplegui.KEY_MAP['up']:
        
        paddle2_vel=-4
    elif key==simplegui.KEY_MAP['down']:
        
        paddle2_vel=4
        
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP['w'] or key==simplegui.KEY_MAP['s']:
        
        paddle1_vel=0
    if key==simplegui.KEY_MAP['up'] or key==simplegui.KEY_MAP['down']:
        
        paddle2_vel=0


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button('Reset',new_game,100)


# start frame
new_game()
frame.start()
